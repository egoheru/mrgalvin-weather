[{"E:\\mrgalvin-weather\\src\\index.js":"1","E:\\mrgalvin-weather\\src\\reportWebVitals.js":"2","E:\\mrgalvin-weather\\src\\App.js":"3","E:\\mrgalvin-weather\\src\\components\\heading.js":"4","E:\\mrgalvin-weather\\src\\components\\form.js":"5","E:\\mrgalvin-weather\\src\\components\\forecast.js":"6","E:\\mrgalvin-weather\\src\\components\\appmaps.js":"7","E:\\mrgalvin-weather\\src\\components\\googlemaps.js":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":1984,"mtime":1610451098518,"results":"12","hashOfConfig":"10"},{"size":326,"mtime":1610473789244,"results":"13","hashOfConfig":"10"},{"size":372,"mtime":1610287936618,"results":"14","hashOfConfig":"10"},{"size":808,"mtime":1610474728651,"results":"15","hashOfConfig":"10"},{"size":694,"mtime":1610466062170,"results":"16","hashOfConfig":"10"},{"size":1359,"mtime":1610451054965,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"17n37ns",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\mrgalvin-weather\\src\\index.js",[],["37","38"],"E:\\mrgalvin-weather\\src\\reportWebVitals.js",[],"E:\\mrgalvin-weather\\src\\App.js",["39","40"],"import logo from './logo.svg';\nimport './App.css';\nimport Heading from './components/heading';\nimport Form from './components/form';\nimport { render } from '@testing-library/react';\nimport React from 'react'\nimport Forecast from './components/forecast';\nimport Appmaps from './components/appmaps';\n// import GoogleApiWrapper from './components/googlemaps';\nconst api_key = \"a634a07eec339ac9699dc64129cad6db\"\n\nclass App extends React.Component {\n  state = {\n    temperature: \"\",\n    city: \"\",\n    country: \"\",\n    humidity: \"\",\n    pressure: \"\",\n    icon: \"\",\n    description: \"\",\n    error: \"\"\n  }\n\ngetWeather = async (e) => {\n  const city = e.target.elements.city.value;\n  const country = e.target.elements.country.value;\n  e.preventDefault();\n  const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}, ${country}&units=imperial&appid=${api_key}`)\n\n  const response = await api_call.json()\n   if (city && country) {\n     this.setState({\n       temperature: response.main.temp,\n       city: response.name,\n       country: response.sys.country,\n       humidity: response.main.humidity,\n       pressure: response.main.pressure,\n       icon: response.weather[0].icon,\n       description: response.weather[0].description,\n       error: \"\"\n     })\n   } else {\n     this.setState({\n     error: \"Please fill out input fields...\"\n    })\n   }\n}\n\n  render() {\n    return (\n      <>\n      <div className = \"container\">\n      <Heading/>\n      <div className=\"form\">\n      <Form loadWeather={this.getWeather} /></div>\n      <div className=\"weather\">\n      <Forecast \n      temperature={this.state.temperature}\n      city={this.state.city}\n      country={this.state.country}\n      humidity={this.state.humidity}\n      pressure={this.state.pressure}\n      icon={this.state.icon}\n      description={this.state.description}\n      error={this.state.error}/>\n      </div>\n    </div>\n    <Appmaps/>\n    {/* <GoogleApiWrapper/> */}\n    </>\n    )\n  }\n}\n\nexport default App;\n","E:\\mrgalvin-weather\\src\\components\\heading.js",[],"E:\\mrgalvin-weather\\src\\components\\form.js",[],"E:\\mrgalvin-weather\\src\\components\\forecast.js",[],"E:\\mrgalvin-weather\\src\\components\\appmaps.js",["41"],"import React, { Component } from 'react'\r\n\r\n class Appmaps extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"map-contain\">\r\n                    <iframe className=\"map-border\" src=\"https://www.google.com/maps/d/u/0/embed?mid=1ytMydlulT4yB0__5DZw8ZXfppViV2QbW\" style={{ \r\n                        border: '0',\r\n                        width: '100%',\r\n                        height: '400px',\r\n                        frameborder: '0',\r\n                        padding: '20px'\r\n                    }} allowFullScreen>\r\n\r\n                    </iframe>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Appmaps;","E:\\mrgalvin-weather\\src\\components\\googlemaps.js",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":1,"column":8,"nodeType":"48","messageId":"49","endLine":1,"endColumn":12},{"ruleId":"46","severity":1,"message":"50","line":5,"column":10,"nodeType":"48","messageId":"49","endLine":5,"endColumn":16},{"ruleId":"51","severity":1,"message":"52","line":8,"column":21,"nodeType":"53","endLine":14,"endColumn":40},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'render' is defined but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]